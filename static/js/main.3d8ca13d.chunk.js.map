{"version":3,"sources":["reducers/reducer.js","reducers/index.js","actions/types.js","actions/actions.js","sagas/index.js","store.js","components/Header/Header.js","components/ImageGrid/ImageGrid.js","App.js","index.js"],"names":["initialState","message","images","combineReducers","reducer","state","action","type","payload","loadImages","setImages","handleImagesLoad","rootSaga","page","getPage","fetchImages","a","async","fetch","response","json","data","status","Error","errors","select","call","put","takeEvery","configureStore","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","run","connect","dispatch","load","onClick","e","ImageGrid","this","props","className","map","image","key","id","Math","ceil","height","width","src","urls","small","alt","user","username","Component","App","useState","ReactDOM","render","document","getElementById"],"mappings":"wRAEMA,EAAe,CACjBC,QAAS,qBACTC,OAAQ,ICAGC,4BAAgB,CAC3BC,QDEW,WAAsC,IAA7BC,EAA4B,uDAAtBL,EAAcM,EAAQ,uCAChD,OAAOA,EAAOC,MACV,IETiB,YFajB,IEZmB,cFaf,OAAO,eACAF,GAEX,IEfkB,aFgBd,OAAO,eACAA,EADP,CAEIH,OAAQI,EAAOE,UAEvB,QACI,OAAOH,M,gCGXNI,G,MAAa,WAEtB,MAAO,CACHF,KDdmB,iBCmBdG,EAAY,SAACR,GACtB,MAAO,CACHK,KDpBkB,aCqBlBC,QAASN,I,WCJNS,G,WAMAC,GAnBPC,EAAO,EACLC,EAAU,SAAAT,GAAK,OAAIA,EAAMD,QAAQH,SAEjCc,EAAc,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACOE,MAAM,gIAAD,OAAiIL,KAD7I,cACVM,EADU,kBAAAH,EAAA,MAEGG,EAASC,QAFZ,UAEVC,EAFU,SAGZF,EAASG,OAAS,KAHN,sBAIN,IAAIC,MAAMF,EAAKG,QAJT,cAMhBX,GAAM,EANU,kBAOTQ,GAPS,uCAUpB,SAAWV,IAAX,yEACiB,OADjB,SACuBc,YAAOX,GAD9B,OAEmB,OADTD,EADV,gBAEyBa,YAAKX,EAAaF,GAF3C,OAGI,OADMX,EAFV,gBAGUyB,YAAIjB,EAAUR,IAHxB,uCAMA,SAAWU,IAAX,iEACI,OADJ,SACUgB,YFzBiB,cEyBMjB,GADjC,uCAIeC,QCTAiB,EAZQ,WAEvB,IAAMC,EAAiBC,cAGjBC,EAAQC,sBAAYC,EAAaC,8BAAoBC,0BAAgBN,KAI3E,OAFAA,EAAeO,IAAIzB,GAEZoB,GCOQM,G,MAAAA,aARS,SAAC,GAAD,MAAgB,CACpCjC,MADoB,EAAED,YAIC,SAAAmC,GAAQ,MAAK,CACpCC,KAAM,kBAAMD,EHPL,CACHhC,KDdmB,oBIuBZ+B,EAfA,SAAC,GAAY,IAAXE,EAAU,EAAVA,KAIb,OAAQ,4BAAQC,QAAS,SAACC,GAFvBF,MAEK,uB,wCCLNG,G,uLAEM,IAEDzC,EAAU0C,KAAKC,MAAMxC,MAArBH,OACP,OACE,yBAAK4C,UAAU,WACb,6BAASA,UAAU,QAChB5C,EAAO6C,KAAI,SAAAC,GAAK,OACf,yBACEC,IAAKD,EAAME,GACXJ,UAAS,oBAAeK,KAAKC,KAAKJ,EAAMK,OAASL,EAAMM,SAEvD,yBAAKC,IAAKP,EAAMQ,KAAKC,MAAOC,IAAKV,EAAMW,KAAKC,qB,GAblCC,cA0BTvB,eAJS,SAACjC,GAAD,MAAY,CAClCA,MAAOA,EAAMD,WAGyB,CACtCK,cADa6B,CAEZK,GC5BGX,EAAQH,IAcCiC,MAZf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBAEb,OAFa,UAGX,kBAAC,IAAD,CAAU/B,MAAOA,GACjB,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCXNgC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3d8ca13d.chunk.js","sourcesContent":["import { LOAD_TYPE, LOAD_IMAGES, LOAD_IMAGE } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    message: 'hello from reducer',\r\n    images: []\r\n}\r\n\r\nexport default function(state=initialState, action) {\r\n    switch(action.type) {\r\n        case LOAD_TYPE:\r\n            return {\r\n                ...state\r\n            }\r\n        case LOAD_IMAGES:\r\n            return {\r\n                ...state\r\n            }\r\n        case LOAD_IMAGE:\r\n            return {\r\n                ...state,\r\n                images: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n} ","import {combineReducers} from 'redux';\r\nimport reducer from './reducer';\r\n\r\n\r\nexport default combineReducers({\r\n    reducer\r\n});","export const LOAD_TYPE = 'LOAD_TYPE';\r\nexport const LOAD_IMAGES = 'LOAD_IMAGES';\r\nexport const LOAD_IMAGE = 'LOAD_IMAGE'","import { LOAD_TYPE, LOAD_IMAGES, LOAD_IMAGE } from \"./types\";\r\nimport axios from 'axios';\r\n// export const loadType = () => dispatch => {\r\n//     dispatch({\r\n//         type: LOAD_TYPE,\r\n//         payload: 'Hello from actions'\r\n//     })\r\n// }\r\n\r\nexport const loadType = () => ({\r\n    type: LOAD_TYPE\r\n})\r\nexport const loadImages = () => {\r\n    \r\n    return {\r\n        type: LOAD_IMAGES\r\n    }\r\n\r\n}\r\n\r\nexport const setImages = (images) => {\r\n    return {\r\n        type: LOAD_IMAGE,\r\n        payload: images\r\n    }\r\n}","import { takeEvery, select, call, put } from 'redux-saga/effects';\r\nimport { LOAD_TYPE, LOAD_IMAGES } from '../actions/types';\r\nimport { setImages } from '../actions/actions';\r\n\r\n\r\nconst key = \"5f96323678d05ff0c4eb264ef184556868e303b32a2db88ecbf15746e6f25e02\";\r\nlet page = 1\r\nconst getPage = state => state.reducer.message\r\n\r\nconst fetchImages = async () => {\r\n    const response = await fetch(`https://api.unsplash.com/photos/?client_id=5f96323678d05ff0c4eb264ef184556868e303b32a2db88ecbf15746e6f25e02&per_page=20&page=${page}`)\r\n    const data = await response.json();\r\n    if (response.status > 400) {\r\n        throw new Error(data.errors)\r\n    }\r\n    page+=1\r\n    return data;\r\n}\r\n\r\nfunction * handleImagesLoad() {\r\n    const page = yield select(getPage) \r\n    const images = yield call(fetchImages, page)\r\n    yield put(setImages(images))\r\n}\r\n\r\nfunction * rootSaga() {\r\n    yield takeEvery(LOAD_IMAGES, handleImagesLoad)\r\n}\r\n\r\nexport default rootSaga","import {createStore, applyMiddleware} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from './sagas';\r\nimport { LOAD_TYPE } from './actions/types';\r\n\r\nconst configureStore = () => {\r\nconst initialState = {};\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst middleware = [sagaMiddleware]\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nreturn store\r\n}\r\n\r\nexport default configureStore;","import React from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport \"./styles.css\";\r\nimport { loadType, loadImages } from \"../../actions/actions\";\r\nimport { LOAD_TYPE } from \"../../actions/types\";\r\n\r\n\r\n\r\n\r\nconst Header = ({load}) => {\r\n    const handleClick = (e) => {\r\n       load();\r\n    }\r\n    return (<header onClick={(e) => handleClick(e)}>What the Splash</header>)};\r\n\r\n\r\nconst mapStateToProps = ({reducer}) => ({\r\n    state: reducer\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    load: () => dispatch(loadImages())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React, { Component } from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport \"./styles.css\";\r\n\r\nimport { loadImages} from '../../actions/actions';\r\n\r\nconst key = \"5f96323678d05ff0c4eb264ef184556868e303b32a2db88ecbf15746e6f25e02\";\r\n\r\nclass ImageGrid extends Component {\r\n\r\n  render() {\r\n\r\n    const {images} = this.props.state\r\n    return (\r\n      <div className=\"content\">\r\n        <section className=\"grid\">\r\n          {images.map(image => (\r\n            <div\r\n              key={image.id}\r\n              className={`item item-${Math.ceil(image.height / image.width)}`}\r\n            >\r\n              <img src={image.urls.small} alt={image.user.username} />\r\n            </div>\r\n          ))}\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  state: state.reducer\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n  loadImages\r\n})(ImageGrid);\r\n","import React, {useState, Fragment} from \"react\";\n\nimport {Provider} from 'react-redux';\nimport configureStore from \"./store\";\nimport Header from \"./components/Header/Header\";\nimport ImageGrid from \"./components/ImageGrid/ImageGrid\";\nimport { LOAD_TYPE } from \"./actions/types\";\n\nconst store = configureStore()\n\nfunction App() {\n  const [state, setState] = useState([])\n  return (\n    <Provider store={store}>\n    <Fragment>\n      <Header />\n      <ImageGrid />\n    </Fragment>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}